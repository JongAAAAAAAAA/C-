using System;
using System.Text;

namespace BAEKJOON_4673
{
    class Program
    {
        //    n     d(n)    nextNumbers[n] = d(n)    hasConstructors[d(n)]
        // --------------------------------------------------------------------
        //    1        2     nextNumbers[ 1] =  2    hasConstructors[ 2] = true
        //    2        4     nextNumbers[ 2] =  4    hasConstructors[ 4] = true
        //    4        8     nextNumbers[ 4] =  8    hasConstructors[ 8] = true
        //    8       16     nextNumbers[ 8] = 16    hasConstructors[16] = true
        //   16       23     nextNumbers[16] = 23    hasConstructors[23] = true
        //  ...      ...                      ...                           ...

        private const int MAX_NUMBER = 10000;

        private static int[] nextNumbers = new int[MAX_NUMBER];
        private static bool[] hasConstructors = new bool[MAX_NUMBER];

        static void Main()
        {
            for (int i = 1; i < MAX_NUMBER; i++)
            {
                // i부터 시작해서 연달아 self number를 구하고 nextNumbers, hasConstructors 배열에 기록
                CheckSelfNumbers(i);
            }

            // 결과 출력
            StringBuilder sb = new StringBuilder();
            for (int i = 1; i < MAX_NUMBER; i++)
            {
                if (hasConstructors[i] == false)
                {
                    sb.AppendLine(i.ToString());
                }
            }

            Console.WriteLine(sb.ToString());
        }

        private static void CheckSelfNumbers(int n)
        {
            while (true)
            {
                int nextNumber = GetSelfNumber(n);

                // SelfNumber가 최대값 이상이면 체크를 종료.
                if (nextNumber >= MAX_NUMBER) return;

                // n의 다음 SelfNumber 기록.
                nextNumbers[n] = nextNumber;

                // nextNumber의 생성자 유무 체크
                if (nextNumber < MAX_NUMBER)
                {
                    hasConstructors[nextNumber] = true;
                }

                n = nextNumber;
            }
        }

        private static int GetSelfNumber(int n)
        {
            int result = n;

            while (n > 0)
            {
                int digit = n % 10;
                result += digit;
                n /= 10;
            }

            return result;
        }
    }
}
